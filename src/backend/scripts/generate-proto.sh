#!/bin/bash

# CodeQuest Proto Generation Script
# Version: 1.0.0
# Generates TypeScript/JavaScript code from Protocol Buffer definitions with
# enhanced validation for tenant isolation and AI detection capabilities

# Exit on any error
set -e

# Required tool versions
REQUIRED_PROTOC_VERSION="3.0.0"
REQUIRED_PLUGIN_VERSION="0.15.0"

# Directory configuration
PROTO_DIR="../proto"
OUT_DIR="../src/generated"
PLUGIN_PATH="./node_modules/.bin/protoc-gen-ts"
LOG_DIR="../logs/proto-gen"
TEMP_DIR="/tmp/proto-gen"

# Ensure required directories exist
mkdir -p "$OUT_DIR" "$LOG_DIR" "$TEMP_DIR"

# Logging setup
LOG_FILE="$LOG_DIR/proto-gen-$(date +%Y%m%d_%H%M%S).log"
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

error() {
    log "ERROR: $1" >&2
    exit 1
}

# Validate environment and dependencies
validate_environment() {
    log "Validating environment..."

    # Check protoc installation
    if ! command -v protoc >/dev/null 2>&1; then
        error "protoc compiler not found. Please install protobuf-compiler >= $REQUIRED_PROTOC_VERSION"
    }

    PROTOC_VERSION=$(protoc --version | cut -d' ' -f2)
    if [[ "$PROTOC_VERSION" < "$REQUIRED_PROTOC_VERSION" ]]; then
        error "protoc version $PROTOC_VERSION is below required version $REQUIRED_PROTOC_VERSION"
    }

    # Check TypeScript plugin
    if [[ ! -f "$PLUGIN_PATH" ]]; then
        error "protoc-gen-ts plugin not found at $PLUGIN_PATH. Please install ts-protoc-gen >= $REQUIRED_PLUGIN_VERSION"
    }

    # Validate directories
    if [[ ! -d "$PROTO_DIR" ]]; then
        error "Proto directory $PROTO_DIR not found"
    }

    if [[ ! -w "$OUT_DIR" ]]; then
        error "Output directory $OUT_DIR is not writable"
    }

    log "Environment validation successful"
}

# Clean generated files
clean_generated() {
    log "Cleaning generated files..."
    
    # Remove existing generated files
    rm -rf "$OUT_DIR"/*
    
    # Create service directories
    mkdir -p "$OUT_DIR/activity"
    mkdir -p "$OUT_DIR/points"
    mkdir -p "$OUT_DIR/team"
    
    # Initialize index file
    cat > "$OUT_DIR/index.ts" <<EOF
/**
 * @fileoverview Generated Protocol Buffer code for CodeQuest services
 * @generated
 */

export * from './activity';
export * from './points';
export * from './team';
EOF

    log "Clean completed"
}

# Generate TypeScript code from proto files
generate_proto() {
    log "Starting proto generation..."

    # Common protoc options
    PROTOC_OPTS="--plugin=protoc-gen-ts=$PLUGIN_PATH \
                 --ts_out=service=grpc-node,mode=grpc-js:$OUT_DIR \
                 --proto_path=$PROTO_DIR"

    # Generate activity service with AI detection
    log "Generating activity service..."
    protoc $PROTOC_OPTS \
        "$PROTO_DIR/activity.proto" \
        || error "Failed to generate activity service"

    # Generate points service with tenant isolation
    log "Generating points service..."
    protoc $PROTOC_OPTS \
        "$PROTO_DIR/points.proto" \
        || error "Failed to generate points service"

    # Generate team service with hierarchy support
    log "Generating team service..."
    protoc $PROTOC_OPTS \
        "$PROTO_DIR/team.proto" \
        || error "Failed to generate team service"

    # Set proper permissions
    chmod -R 644 "$OUT_DIR"/*
    find "$OUT_DIR" -type d -exec chmod 755 {} \;

    # Validate generated files
    validate_generated_files
}

# Validate generated files
validate_generated_files() {
    log "Validating generated files..."

    # Check for required service files
    required_files=(
        "activity/activity.pb.ts"
        "points/points.pb.ts"
        "team/team.pb.ts"
        "index.ts"
    )

    for file in "${required_files[@]}"; do
        if [[ ! -f "$OUT_DIR/$file" ]]; then
            error "Required file $file not generated"
        fi
    }

    # Verify file contents
    for file in "$OUT_DIR"/**/*.ts; do
        if ! grep -q "Generated by protoc-gen-ts" "$file"; then
            error "Invalid generated file: $file"
        fi
    done

    log "Generated files validation successful"
}

# Main execution
main() {
    log "Starting proto generation process..."
    
    validate_environment
    clean_generated
    generate_proto
    
    log "Proto generation completed successfully"
}

# Execute main function
main