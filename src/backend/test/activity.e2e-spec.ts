import { Test, TestingModule } from '@nestjs/testing'; // ^10.0.0
import { INestApplication } from '@nestjs/common'; // ^10.0.0
import * as request from 'supertest'; // ^6.3.0
import { performance } from 'perf_hooks'; // native
import { ActivityModule } from '../src/modules/activity/activity.module';
import { CreateActivityDto } from '../src/dto/activity/create-activity.dto';
import { ActivityType } from '../src/constants/activity.constants';

describe('Activity Management (e2e)', () => {
  let app: INestApplication;
  let moduleFixture: TestingModule;
  const testTenantId = 'test-tenant-123';
  const testTeamMemberId = '550e8400-e29b-41d4-a716-446655440000';

  beforeAll(async () => {
    // Create test module with ActivityModule and dependencies
    moduleFixture = await Test.createTestingModule({
      imports: [ActivityModule],
    }).compile();

    app = moduleFixture.createNestApplication();

    // Configure app with proper middleware and settings
    app.setGlobalPrefix('api/v1');
    
    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  describe('Activity Creation Suite', () => {
    it('should create valid activity with correct data', async () => {
      const createActivityDto: CreateActivityDto = {
        teamMemberId: testTeamMemberId,
        type: ActivityType.CODE_CHECKIN,
        isAiGenerated: false,
        metadata: {
          adoId: 'ADO-123',
          repository: 'test-repo',
          branch: 'main',
          url: 'https://dev.azure.com/test/commit/123',
          title: 'Test commit',
          description: 'Test commit description',
          size: 100,
          complexity: 5,
          tags: ['test'],
          aiConfidence: 0
        }
      };

      const response = await request(app.getHttpServer())
        .post('/api/v1/activities')
        .set('x-tenant-id', testTenantId)
        .send(createActivityDto)
        .expect(201);

      expect(response.body).toHaveProperty('id');
      expect(response.body.points).toBe(10); // Base points for CODE_CHECKIN
      expect(response.body.isAiGenerated).toBe(false);
    });

    it('should detect AI-generated code accurately', async () => {
      const createActivityDto: CreateActivityDto = {
        teamMemberId: testTeamMemberId,
        type: ActivityType.CODE_CHECKIN,
        isAiGenerated: true,
        metadata: {
          adoId: 'ADO-124',
          repository: 'test-repo',
          branch: 'feature/ai-test',
          url: 'https://dev.azure.com/test/commit/124',
          title: 'AI generated code',
          description: '// Generated by AI\nfunction test() { return true; }',
          size: 50,
          complexity: 3,
          tags: ['ai-generated'],
          aiConfidence: 0.9
        }
      };

      const response = await request(app.getHttpServer())
        .post('/api/v1/activities')
        .set('x-tenant-id', testTenantId)
        .send(createActivityDto)
        .expect(201);

      expect(response.body.points).toBe(7.5); // 75% of base points for AI-generated
      expect(response.body.isAiGenerated).toBe(true);
    });

    it('should process activity within 2-second SLA', async () => {
      const createActivityDto: CreateActivityDto = {
        teamMemberId: testTeamMemberId,
        type: ActivityType.PULL_REQUEST,
        isAiGenerated: false,
        metadata: {
          adoId: 'ADO-125',
          repository: 'test-repo',
          branch: 'feature/performance-test',
          url: 'https://dev.azure.com/test/pr/125',
          title: 'Performance test PR',
          description: 'Testing real-time processing',
          size: 200,
          complexity: 4,
          tags: ['performance'],
          aiConfidence: 0
        }
      };

      const startTime = performance.now();

      await request(app.getHttpServer())
        .post('/api/v1/activities')
        .set('x-tenant-id', testTenantId)
        .send(createActivityDto)
        .expect(201);

      const processingTime = performance.now() - startTime;
      expect(processingTime).toBeLessThan(2000); // 2-second SLA
    });

    it('should handle concurrent activity creation', async () => {
      const createActivities = Array(5).fill(null).map((_, index) => ({
        teamMemberId: testTeamMemberId,
        type: ActivityType.CODE_REVIEW,
        isAiGenerated: false,
        metadata: {
          adoId: `ADO-${130 + index}`,
          repository: 'test-repo',
          branch: 'main',
          url: `https://dev.azure.com/test/review/${130 + index}`,
          title: `Concurrent review ${index}`,
          description: 'Testing concurrent processing',
          size: 100,
          complexity: 3,
          tags: ['concurrent'],
          aiConfidence: 0
        }
      }));

      const startTime = performance.now();
      
      await Promise.all(
        createActivities.map(activity =>
          request(app.getHttpServer())
            .post('/api/v1/activities')
            .set('x-tenant-id', testTenantId)
            .send(activity)
            .expect(201)
        )
      );

      const processingTime = performance.now() - startTime;
      expect(processingTime).toBeLessThan(2000 * createActivities.length);
    });
  });

  describe('Activity Retrieval Suite', () => {
    it('should return paginated activities', async () => {
      const response = await request(app.getHttpServer())
        .get('/api/v1/activities/team-member/' + testTeamMemberId)
        .set('x-tenant-id', testTenantId)
        .query({ skip: 0, take: 10 })
        .expect(200);

      expect(Array.isArray(response.body.activities)).toBe(true);
      expect(response.body).toHaveProperty('total');
      expect(response.body.activities.length).toBeLessThanOrEqual(10);
    });

    it('should filter activities by date range', async () => {
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 1);
      const endDate = new Date();

      const response = await request(app.getHttpServer())
        .get('/api/v1/activities/date-range')
        .set('x-tenant-id', testTenantId)
        .query({
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString()
        })
        .expect(200);

      expect(Array.isArray(response.body)).toBe(true);
      response.body.forEach((activity: any) => {
        const activityDate = new Date(activity.createdAt);
        expect(activityDate >= startDate && activityDate <= endDate).toBe(true);
      });
    });
  });

  describe('Real-time Processing Suite', () => {
    it('should maintain data consistency under load', async () => {
      const activities = Array(10).fill(null).map((_, index) => ({
        teamMemberId: testTeamMemberId,
        type: ActivityType.STORY_CLOSURE,
        isAiGenerated: false,
        metadata: {
          adoId: `ADO-${140 + index}`,
          repository: 'test-repo',
          branch: 'main',
          url: `https://dev.azure.com/test/story/${140 + index}`,
          title: `Load test story ${index}`,
          description: 'Testing data consistency',
          size: 150,
          complexity: 4,
          tags: ['load-test'],
          aiConfidence: 0
        }
      }));

      const results = await Promise.all(
        activities.map(activity =>
          request(app.getHttpServer())
            .post('/api/v1/activities')
            .set('x-tenant-id', testTenantId)
            .send(activity)
            .expect(201)
        )
      );

      const uniqueIds = new Set(results.map(r => r.body.id));
      expect(uniqueIds.size).toBe(activities.length);
    });

    it('should handle service failures gracefully', async () => {
      // Simulate a malformed activity
      const invalidActivity = {
        teamMemberId: 'invalid-uuid',
        type: 'INVALID_TYPE',
        isAiGenerated: 'not-a-boolean',
        metadata: null
      };

      const response = await request(app.getHttpServer())
        .post('/api/v1/activities')
        .set('x-tenant-id', testTenantId)
        .send(invalidActivity)
        .expect(400);

      expect(response.body).toHaveProperty('message');
      expect(response.body).toHaveProperty('error');
    });
  });
});