syntax = "proto3";

package codequest.activity;

option go_package = "./activity";

// Import Google's well-known type definitions
import "google/protobuf/timestamp.proto";  // v3.0
import "google/protobuf/wrappers.proto";   // v3.0

// Main message type for activity events with enhanced AI detection and tenant isolation
message ActivityMessage {
    // Unique identifier for the activity
    string id = 1;
    
    // Mandatory tenant identifier for multi-tenant isolation
    string tenant_id = 2;
    
    // Type of activity performed
    ActivityType type = 3;
    
    // Identifier of the team member who performed the activity
    string team_member_id = 4;
    
    // Points awarded for this activity
    int32 points = 5;
    
    // Flag indicating if the activity was generated by AI
    bool is_ai_generated = 6;
    
    // Confidence score for AI detection (0.0 to 1.0)
    float ai_confidence_score = 7;
    
    // Timestamp when the activity was created
    google.protobuf.Timestamp created_at = 8;
    
    // Additional metadata about the activity
    ActivityMetadata metadata = 9;
}

// Enhanced message type for activity metadata including impact metrics
message ActivityMetadata {
    // Azure DevOps identifier for the activity
    string ado_id = 1;
    
    // Repository where the activity occurred
    string repository = 2;
    
    // Branch where the activity occurred
    string branch = 3;
    
    // URL to the activity in Azure DevOps
    string url = 4;
    
    // Title or summary of the activity
    string title = 5;
    
    // Detailed description of the activity
    string description = 6;
    
    // Impact size in terms of lines of code or similar metric
    int32 size_impact = 7;
    
    // Calculated complexity score for the activity
    float complexity_score = 8;
}

// Enumeration of activity types with unspecified default
enum ActivityType {
    // Default unspecified value
    ACTIVITY_TYPE_UNSPECIFIED = 0;
    
    // Code check-in activity
    CODE_CHECKIN = 1;
    
    // Pull request creation or update
    PULL_REQUEST = 2;
    
    // Code review completion
    CODE_REVIEW = 3;
    
    // Bug fix completion
    BUG_FIX = 4;
    
    // User story closure
    STORY_CLOSURE = 5;
}

// Request message for creating a single activity
message CreateActivityRequest {
    // Activity message to create
    ActivityMessage activity = 1;
}

// Response message for activity creation
message CreateActivityResponse {
    // ID of the created activity
    string activity_id = 1;
}

// Request message for retrieving a single activity
message GetActivityRequest {
    // ID of the activity to retrieve
    string activity_id = 1;
    
    // Tenant ID for isolation
    string tenant_id = 2;
}

// Request message for listing activities
message ListActivitiesRequest {
    // Tenant ID for isolation
    string tenant_id = 1;
    
    // Maximum number of activities to return
    int32 page_size = 2;
    
    // Token for pagination
    string page_token = 3;
    
    // Optional team member ID filter
    string team_member_id = 4;
    
    // Optional activity type filter
    ActivityType type = 5;
}

// Response message for listing activities
message ListActivitiesResponse {
    // List of activities
    repeated ActivityMessage activities = 1;
    
    // Token for getting the next page
    string next_page_token = 2;
}

// Request message for streaming activities
message StreamActivitiesRequest {
    // Tenant ID for isolation
    string tenant_id = 1;
    
    // Optional team member ID filter
    string team_member_id = 2;
    
    // Optional activity type filter
    ActivityType type = 3;
}

// Request message for batch activity creation
message BatchCreateActivitiesRequest {
    // List of activities to create
    repeated ActivityMessage activities = 1;
}

// Response message for batch activity creation
message BatchCreateActivitiesResponse {
    // List of created activity IDs
    repeated string activity_ids = 1;
}

// Enhanced gRPC service definition for activity operations including batch processing
service ActivityService {
    // Creates a new activity
    rpc CreateActivity(CreateActivityRequest) returns (CreateActivityResponse) {}
    
    // Retrieves a specific activity
    rpc GetActivity(GetActivityRequest) returns (ActivityMessage) {}
    
    // Lists activities with pagination and filtering
    rpc ListActivities(ListActivitiesRequest) returns (ListActivitiesResponse) {}
    
    // Streams activities in real-time
    rpc StreamActivities(StreamActivitiesRequest) returns (stream ActivityMessage) {}
    
    // Creates multiple activities in a single request
    rpc BatchCreateActivities(BatchCreateActivitiesRequest) returns (BatchCreateActivitiesResponse) {}
}