name: Web CD

on:
  workflow_run:
    workflows: ["Web CI"]
    types: [completed]
    branches: [main]

concurrency:
  group: production
  cancel-in-progress: false

env:
  WORKING_DIRECTORY: src/web
  AZURE_CONTAINER_REGISTRY: codequest.azurecr.io
  KUBERNETES_NAMESPACE: default
  DEPLOYMENT_TIMEOUT: 300s
  HEALTH_CHECK_RETRIES: 5
  NODE_VERSION: '18.x'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Download artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            const testResults = artifacts.data.artifacts.find(artifact => artifact.name === "test-results");
            if (testResults) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: testResults.id,
                archive_format: 'zip'
              });
            }

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Get version
        id: package_version
        run: |
          VERSION=$(node -p "require('./${{ env.WORKING_DIRECTORY }}/package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push container
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          docker build \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }} \
            --build-arg BUILD_VERSION=${{ steps.package_version.outputs.version }} \
            --label "org.opencontainers.image.version=${{ steps.package_version.outputs.version }}" \
            --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            -t ${{ env.AZURE_CONTAINER_REGISTRY }}/codequest-web:${{ steps.package_version.outputs.version }} \
            -t ${{ env.AZURE_CONTAINER_REGISTRY }}/codequest-web:latest \
            -f Dockerfile .
          
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/codequest-web:${{ steps.package_version.outputs.version }}
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/codequest-web:latest

      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: codequest-prod-aks

      - name: Deploy to AKS
        uses: azure/k8s-deploy@v4
        with:
          namespace: ${{ env.KUBERNETES_NAMESPACE }}
          manifests: |
            infrastructure/kubernetes/web/deployment.yaml
            infrastructure/kubernetes/web/service.yaml
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}/codequest-web:${{ steps.package_version.outputs.version }}
          strategy: rolling
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          rollback-on-failure: true

      - name: Verify Deployment Health
        run: |
          RETRIES=${{ env.HEALTH_CHECK_RETRIES }}
          DEPLOYMENT="codequest-web"
          
          while [ $RETRIES -gt 0 ]; do
            STATUS=$(kubectl rollout status deployment/$DEPLOYMENT -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=60s)
            if [ $? -eq 0 ]; then
              echo "Deployment healthy"
              exit 0
            fi
            let RETRIES--
            echo "Deployment not yet healthy. Retries left: $RETRIES"
            sleep 10
          done
          
          echo "Deployment health check failed"
          kubectl describe deployment/$DEPLOYMENT -n ${{ env.KUBERNETES_NAMESPACE }}
          exit 1

      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const version = '${{ steps.package_version.outputs.version }}';
            const message = status === 'success' 
              ? `✅ Web frontend v${version} deployed successfully to production`
              : `❌ Web frontend v${version} deployment failed`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });